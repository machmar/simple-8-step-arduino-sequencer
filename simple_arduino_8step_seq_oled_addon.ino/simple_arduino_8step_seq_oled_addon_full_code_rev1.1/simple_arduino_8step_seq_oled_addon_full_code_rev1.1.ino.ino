//#include <Wire.h>
#include <EEPROM.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Rotary.h>
#include <OneButton.h>

Adafruit_SSD1306 display(128, 64, &Wire, 60);
Rotary rotary = Rotary(16, 3);
OneButton button(14, true);
#define resetIn 15
#define holdIn 4
#define clockIn 2
#define clockDetectIn 13
#define stepDetectIn 17
#define stepKnobIn 20
#define stepCvIn 21
#define muxA 10
#define muxB 11
#define muxC 12
#define flipCVpin 9//used as a led disable pin rn
#define flopCVpin 8
#define flipINVpin 6
#define flopINVpin 7
#define gateOutpin 5

#define mspf 50
#define screenSaverTimeout 15000
#define screenSaverRenew 300000

long prevMill0;
long prevMill1;
long prevMill2;
long prevMillG1;
long prevMillG2;
bool normalClick;

int mainMenuSel;
bool screenSelect;
int stpLSel;
int stpLBline;
int stpTSel;
int stpTBline;

int clkDiv = 1;
int gateOut = 0;
int Direction = 0;
int stepCountCircle;
int stpL1 = 1;
int stpL2 = 1;
int stpL3 = 1;
int stpL4 = 1;
int stpL5 = 1;
int stpL6 = 1;
int stpL7 = 1;
int stpL8 = 1;
int stpL1Var = 0;
int stpL2Var = 0;
int stpL3Var = 0;
int stpL4Var = 0;
int stpL5Var = 0;
int stpL6Var = 0;
int stpL7Var = 0;
int stpL8Var = 0;
int stpLnowVar = 0;
int stpT1 = 1;
int stpT2 = 1;
int stpT3 = 1;
int stpT4 = 1;
int stpT5 = 1;
int stpT6 = 1;
int stpT7 = 1;
int stpT8 = 1;
int stpTnow = 1;
int stpT1Div = 1;
int stpT2Div = 1;
int stpT3Div = 1;
int stpT4Div = 1;
int stpT5Div = 1;
int stpT6Div = 1;
int stpT7Div = 1;
int stpT8Div = 1;
int flipCV = 1;
int flopCV = 0;
int flipINV = 1;
int flopINV = 0;

int stepNumberVirtual = 0;
int stepNumber = 0;
int stepCount = 8;
int stepCountLast = 0;
int clockVar = 0;
int lastClock = 1;
int clockDetectVar = 1;
int stepCheck = 0;
int stepKnobVar = 0;
int stepCvVar = 0;
int stepDetectVar = 1;
int resetVar = 0;
int holdVar = 0;
int holdStage = 0;
int lastStep = 0;
int screenSaverState = 0;
int gateClockSense = 0;

bool stpT3now;
int direction2Var;
int stepKnobInLast;

// 'machmodules logo, 127x64px
const unsigned char Mach_Modules_logo [] PROGMEM = {
  // 'machmodules logo, 127x64px
  0xf0, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0xe0, 0x00, 0x0f, 0x80, 0x00, 0x7c, 0x03, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0xe0, 0x00, 0x0f, 0xc0, 0x01, 0xfe, 0x03, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0xe0, 0x00, 0x1f, 0xc0, 0x03, 0x83, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0xc0, 0x00, 0x1c, 0x00, 0x06, 0x01, 0x80, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0xc0, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0xc0, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0xc0, 0x00, 0x18, 0x00, 0x08, 0x00, 0x40, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0xc0, 0x00, 0x38, 0x00, 0x18, 0x00, 0x60, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x80, 0x00, 0x38, 0x00, 0x10, 0x00, 0x20, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x80, 0x00, 0x38, 0x00, 0x10, 0x00, 0x20, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x80, 0x00, 0x30, 0x80, 0x20, 0x00, 0x10, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x80, 0x00, 0x70, 0x80, 0x20, 0x00, 0x10, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x07, 0x00, 0x00, 0x70, 0x80, 0x20, 0x00, 0x00, 0x3f, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x00, 0x00, 0x60, 0x80, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x00, 0x00, 0xe0, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x00, 0x00, 0xe0, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x02, 0x00, 0x00, 0xe0, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x01, 0xc0, 0x60, 0x20, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x01, 0xc3, 0xe0, 0x20, 0x01, 0xf0, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x20, 0x00, 0x10, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x20, 0x00, 0x10, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x10, 0x00, 0x20, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x03, 0x80, 0x00, 0x10, 0x00, 0x20, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x03, 0x80, 0x30, 0x08, 0x00, 0x40, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x03, 0x00, 0x30, 0x08, 0x00, 0x40, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x07, 0x00, 0x10, 0x04, 0x00, 0x80, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x07, 0x00, 0x18, 0x02, 0x01, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x07, 0x00, 0x18, 0x02, 0x01, 0x00, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x07, 0x80, 0x0e, 0x01, 0xfe, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xf0, 0x0e,
  0x80, 0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xe0, 0x06,
  0x80, 0x00, 0x00, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xc0, 0x06,
  0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xc0, 0x02,
  0x80, 0x00, 0x02, 0x00, 0xc0, 0x00, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0xff, 0x81, 0x82,
  0x80, 0x00, 0x02, 0x01, 0x81, 0xe0, 0x08, 0x7c, 0x00, 0x10, 0x07, 0x0f, 0x00, 0xfd, 0x01, 0x80,
  0x81, 0x00, 0x02, 0x01, 0x80, 0x78, 0x08, 0x06, 0x00, 0x10, 0x07, 0x0f, 0x00, 0xf8, 0x01, 0xc0,
  0x81, 0x00, 0x02, 0x03, 0x80, 0x18, 0x08, 0x00, 0x10, 0x10, 0x07, 0x0f, 0x00, 0xf8, 0x01, 0xf0,
  0x81, 0x00, 0x06, 0x03, 0x80, 0x18, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0xf8, 0x01, 0xf0,
  0x81, 0x00, 0x06, 0x03, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x10, 0x07, 0x0f, 0x00, 0xf8, 0x00, 0x70,
  0x81, 0x80, 0x06, 0x03, 0x00, 0x0c, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x1c,
  0x81, 0x80, 0x06, 0x03, 0x00, 0x0c, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xe0, 0x0e,
  0x81, 0x80, 0x06, 0x07, 0x00, 0x0c, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xe0, 0x06,
  0x81, 0x80, 0x0e, 0x07, 0x00, 0x04, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0x01, 0xf0, 0x02,
  0x81, 0xc0, 0x0e, 0x07, 0x00, 0x04, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0xff, 0xf0, 0x02,
  0x81, 0xc0, 0x0e, 0x07, 0x80, 0x0c, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0xff, 0xf0, 0x02,
  0x81, 0xc0, 0x0e, 0x03, 0x80, 0x08, 0x08, 0x00, 0x08, 0x10, 0x07, 0x0f, 0x00, 0xff, 0xf0, 0x00,
  0x81, 0xc0, 0x1e, 0x03, 0x80, 0x08, 0x08, 0x00, 0x18, 0x10, 0x07, 0x0f, 0x00, 0xf8, 0x00, 0x00,
  0x81, 0xe0, 0x1e, 0x03, 0x80, 0x00, 0x08, 0x00, 0x10, 0x00, 0x07, 0x0f, 0x00, 0xf8, 0x00, 0x00,
  0x81, 0xe0, 0x1e, 0x03, 0xc0, 0x00, 0x08, 0x00, 0x10, 0x00, 0x0f, 0x0f, 0x00, 0x78, 0x00, 0x00,
  0x81, 0xe0, 0x1e, 0x03, 0xc0, 0x00, 0x08, 0x00, 0x30, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x81, 0xe0, 0x1e, 0x01, 0xe0, 0x00, 0x08, 0x00, 0x70, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x81, 0xe0, 0x1e, 0x01, 0xf0, 0x01, 0x08, 0x00, 0x60, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x81, 0xf0, 0x1e, 0x00, 0xf0, 0x02, 0x08, 0x00, 0xe0, 0x80, 0x3c, 0x00, 0x30, 0x01, 0xf0, 0x06,
  0x81, 0xf0, 0x1e, 0x00, 0xfc, 0x04, 0x08, 0x01, 0xc0, 0x40, 0x7c, 0x00, 0x30, 0x01, 0xf8, 0x0e,
  0x81, 0xfc, 0x1f, 0xc0, 0x7f, 0xfc, 0x0f, 0xff, 0x7f, 0xc0, 0x07, 0xe0, 0x03, 0x00, 0x07, 0x00
};

// 'M logo', 13x42px
const unsigned char M_logo [] PROGMEM = {
  0xf0, 0x78, 0xf0, 0x78, 0xf0, 0x78, 0xf0, 0x78, 0xf0, 0x78, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
  0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfd, 0xf8, 0xfd, 0xf8, 0xfd, 0xf8, 0xfd, 0xf8, 0xfd, 0xf8,
  0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8,
  0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xff, 0xf8, 0xef, 0xb8,
  0xef, 0xb8, 0xef, 0xb8, 0xef, 0xb8, 0xef, 0xb8, 0xef, 0xb8, 0xe7, 0x38, 0xe7, 0x38, 0xe7, 0x38,
  0xe7, 0x38, 0xe7, 0x38
};

// 'looping arrow bitmap', 128x44px
const unsigned char looping_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00,
  0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00,
  0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00,
  0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00,
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00,
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00,
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00,
  0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00,
  0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00,
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00,
  0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'mirrored looping arrow bitmap', 128x44px
const unsigned char mirrored_looping_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00,
  0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00,
  0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00,
  0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00,
  0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00,
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00,
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00,
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00,
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00,
  0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00,
  0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00,
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00,
  0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'back and forth arrow', 128x44px
const unsigned char back_and_forth_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'RANDOM', 128x44px
const unsigned char RANDOM [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xc0, 0x00, 0x10, 0x03, 0xf8, 0x07, 0xff, 0xff, 0xc0, 0x01, 0xfe, 0x01, 0xf0, 0x00, 0x7e,
  0x29, 0xb0, 0x00, 0x28, 0x00, 0x58, 0x00, 0x81, 0x41, 0x70, 0x03, 0x83, 0x80, 0x50, 0x00, 0x70,
  0x28, 0x58, 0x00, 0x28, 0x00, 0x2c, 0x00, 0x81, 0x40, 0xd8, 0x0e, 0x00, 0xc0, 0x58, 0x00, 0xa0,
  0x28, 0x28, 0x00, 0x54, 0x00, 0x36, 0x00, 0x81, 0x40, 0x2c, 0x0c, 0x00, 0x60, 0x28, 0x00, 0xa0,
  0x28, 0x28, 0x00, 0x54, 0x00, 0x2b, 0x00, 0x81, 0x40, 0x16, 0x14, 0x00, 0x50, 0x3c, 0x01, 0xb0,
  0x28, 0x28, 0x00, 0x54, 0x00, 0x25, 0x80, 0x81, 0x40, 0x16, 0x18, 0x00, 0x30, 0x34, 0x01, 0xb0,
  0x28, 0x38, 0x00, 0x8a, 0x00, 0x22, 0xc0, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x2e, 0x02, 0xb0,
  0x28, 0x60, 0x00, 0x8a, 0x00, 0x21, 0x60, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x2a, 0x02, 0x90,
  0x2f, 0xc0, 0x00, 0x85, 0x00, 0x20, 0xb0, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x25, 0x04, 0x50,
  0x28, 0xa0, 0x01, 0x05, 0x00, 0x20, 0x58, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x45, 0x04, 0x50,
  0x28, 0x70, 0x01, 0x03, 0x00, 0x20, 0x28, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x42, 0x88, 0x50,
  0x28, 0x58, 0x01, 0xfe, 0x80, 0x20, 0x14, 0x81, 0x40, 0x0e, 0x18, 0x00, 0x30, 0x42, 0x90, 0x50,
  0x28, 0x28, 0x02, 0x02, 0x80, 0x20, 0x0a, 0x81, 0x40, 0x16, 0x14, 0x00, 0x50, 0x41, 0x50, 0x50,
  0x28, 0x14, 0x02, 0x01, 0x40, 0x20, 0x05, 0x81, 0x40, 0x1c, 0x0a, 0x00, 0xa0, 0x40, 0xe0, 0x50,
  0x28, 0x16, 0x04, 0x01, 0x40, 0x20, 0x02, 0x81, 0x40, 0x38, 0x06, 0x00, 0xc0, 0x40, 0xa0, 0x50,
  0x28, 0x0b, 0x04, 0x00, 0xe0, 0x20, 0x01, 0x81, 0x60, 0xf0, 0x03, 0x83, 0x80, 0x40, 0x60, 0x58,
  0xff, 0x07, 0xff, 0x03, 0xf9, 0xfc, 0x00, 0x8f, 0xff, 0xc0, 0x00, 0xfe, 0x01, 0xf0, 0x41, 0xfe,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void mux(int muxBin) {
  if  (muxBin == 0) {
    digitalWrite(muxA, 0);
    digitalWrite(muxB, 0);
    digitalWrite(muxC, 0);
  }

  if  (muxBin == 1) {
    digitalWrite(muxA, 1);
    digitalWrite(muxB, 0);
    digitalWrite(muxC, 0);
  }

  if  (muxBin == 2) {
    digitalWrite(muxA, 0);
    digitalWrite(muxB, 1);
    digitalWrite(muxC, 0);
  }

  if  (muxBin == 3) {
    digitalWrite(muxA, 1);
    digitalWrite(muxB, 1);
    digitalWrite(muxC, 0);
  }

  if  (muxBin == 4) {
    digitalWrite(muxA, 0);
    digitalWrite(muxB, 0);
    digitalWrite(muxC, 1);
  }

  if  (muxBin == 5) {
    digitalWrite(muxA, 1);
    digitalWrite(muxB, 0);
    digitalWrite(muxC, 1);
  }

  if  (muxBin == 6) {
    digitalWrite(muxA, 0);
    digitalWrite(muxB, 1);
    digitalWrite(muxC, 1);
  }

  if  (muxBin == 7) {
    digitalWrite(muxA, 1);
    digitalWrite(muxB, 1);
    digitalWrite(muxC, 1);
  }

}

void clockSense() {
  clockVar = digitalRead(clockIn);

  if (clockVar == 1 && lastClock == 0) {
    if (stepNumber == 0) {
      stpL1Var++;
      if (stpL1Var == stpL1) {
        moveSequence();
        stpL1Var = 0;
      }
      stpTnow = stpT1;
      stpLnowVar = stpL1Var;
      //if (gateClockSense == 0 && stpTnow == 3 && stpLnowVar == 0) gateClockSense = 1;
    }
    if (stepNumber == 1) {
      stpL2Var++;
      if (stpL2Var == stpL2) {
        moveSequence();
        stpL2Var = 0;
      }
      stpTnow = stpT2;
      stpLnowVar = stpL2Var;
    }
    if (stepNumber == 2) {
      stpL3Var++;
      if (stpL3Var == stpL3) {
        moveSequence();
        stpL3Var = 0;
      }
      stpTnow = stpT3;
      stpLnowVar = stpL3Var;
    }
    if (stepNumber == 3) {
      stpL4Var++;
      if (stpL4Var == stpL4) {
        moveSequence();
        stpL4Var = 0;
      }
      stpTnow = stpT4;
      stpLnowVar = stpL4Var;
    }
    if (stepNumber == 4) {
      stpL5Var++;
      if (stpL5Var == stpL5) {
        moveSequence();
        stpL5Var = 0;
      }
      stpTnow = stpT5;
      stpLnowVar = stpL5Var;
    }
    if (stepNumber == 5) {
      stpL6Var++;
      if (stpL6Var == stpL6) {
        moveSequence();
        stpL6Var = 0;
      }
      stpTnow = stpT6;
      stpLnowVar = stpL6Var;
    }
    if (stepNumber == 6) {
      stpL7Var++;
      if (stpL7Var == stpL7) {
        moveSequence();
        stpL7Var = 0;
      }
      stpTnow = stpT7;
      stpLnowVar = stpL7Var;
    }
    if (stepNumber == 7) {
      stpL8Var++;
      if (stpL8Var == stpL8) {
        moveSequence();
        stpL8Var = 0;
      }
      stpTnow = stpT8;
      stpLnowVar = stpL8Var;
    }
    lastClock = 1;
    /*if (stpTnow == 2 ) */gateClockSense = 1;
    /* Serial.print(stpL1Var);
      Serial.print(" , ");
      Serial.print(stpL2Var);
      Serial.print(" , ");
      Serial.print(stpL3Var);
      Serial.print(" , ");
      Serial.print(stpL4Var);
      Serial.print(" , ");
      Serial.print(stpL5Var);
      Serial.print(" , ");
      Serial.print(stpL6Var);
      Serial.print(" , ");
      Serial.print(stpL7Var);
      Serial.print(" , ");
      Serial.println(stpL8Var);*/

  }
  if (clockVar == 0 && lastClock == 1) {
    stepCheck = 1;
    lastClock = 0;
  }
  if (Direction == 0 && stepNumberVirtual >= stepCount) stepNumberVirtual = 0;
  if (Direction == 1 && stepNumberVirtual <= -1) stepNumberVirtual = stepCount - 1;
  if (Direction == 2) {
    if (direction2Var == 0 && stepNumberVirtual >= stepCount - 1) direction2Var = 1;
    if (direction2Var == 1 && stepNumberVirtual < 1) direction2Var = 0;
  }
  if (stepNumberVirtual < 8) stepNumber = stepNumberVirtual;
  if (stepNumberVirtual > 7) stepNumber = (stepNumberVirtual - 8);
}

void resetSense() {
  resetVar = digitalRead(resetIn);
  if (resetVar == 1) {
    stepNumberVirtual = 0;
  }
}

void moveSequence() {
  if (Direction == 0) stepNumberVirtual++;
  if (Direction == 1) stepNumberVirtual--;
  if (Direction == 2) {
    if (direction2Var == 0) stepNumberVirtual++;
    if (direction2Var == 1) stepNumberVirtual--;
  }
  if (Direction == 3) stepNumberVirtual = random(0, stepCount);
}

void sequencerEngine() {
  unsigned long curMill = millis();
  hold();
  clockSense();
  mux(stepNumber);
  resetSense();
  stepKnobVar = analogRead(stepKnobIn);
  if (digitalRead(stepDetectIn) == 1 && stepKnobVar / 9 != stepKnobInLast) {
    if (stepKnobVar > 1006 && stepKnobVar < 1007) stepCount = 8;
    if (stepKnobVar > 895 && stepKnobVar < 1005) stepCount = 8;
    if (stepKnobVar < 894 && stepKnobVar > 765) stepCount = 7;
    if (stepKnobVar < 764 && stepKnobVar > 622) stepCount = 6;
    if (stepKnobVar < 621 && stepKnobVar > 495) stepCount = 5;
    if (stepKnobVar < 494 && stepKnobVar > 360) stepCount = 4;
    if (stepKnobVar < 359 && stepKnobVar > 206) stepCount = 3;
    if (stepKnobVar < 205 && stepKnobVar > 40) stepCount = 2;
    if (stepKnobVar < 39) stepCount = 1;
    stepKnobInLast = stepKnobVar / 9;
    screenGraphics();
    showdisp();
  }
  if (digitalRead(stepDetectIn) == 0) {
    stepCvVar = analogRead(stepCvIn);
    stepCount = map(stepCvVar, 0, 1023, 1, 8);
  }
  /*if (stepCountLast != stepCount) {
    screenSaverState = 0;
    prevMill1 = curMill;
  }*/
}

void hold() {
  holdVar = digitalRead(holdIn);
  if (holdVar == 0) {
    lastStep = stepNumberVirtual;
  }

  if (holdVar == 1) {
    stepNumberVirtual = lastStep;
  }
}

void rotate() {
  unsigned long curMill = millis();
  unsigned char result = rotary.process();
  if (screenSelect == 0) {
    if (result == DIR_CW) {
      mainMenuSel++;
    } else if (result == DIR_CCW) {
      mainMenuSel--;
    }
    if (mainMenuSel == -1) mainMenuSel = 0;
    if (mainMenuSel == 6) mainMenuSel = 5;
  }
  if (screenSelect == 1) {
    if (mainMenuSel <= 0) {
      if (result == DIR_CW) {
        clkDiv++;
      } else if (result == DIR_CCW) {
        clkDiv--;
      }
      if (clkDiv == 0) clkDiv = 1;
      if (clkDiv == 51) clkDiv = 50;
    }
    if (mainMenuSel == 2) {
      if (result == DIR_CW) {
        if (stpLSel == 0) stpL1++;
        if (stpLSel == 1) stpL2++;
        if (stpLSel == 2) stpL3++;
        if (stpLSel == 3) stpL4++;
        if (stpLSel == 4) stpL5++;
        if (stpLSel == 5) stpL6++;
        if (stpLSel == 6) stpL7++;
        if (stpLSel == 7) stpL8++;
      } else if (result == DIR_CCW) {
        if (stpLSel == 0) stpL1--;
        if (stpLSel == 1) stpL2--;
        if (stpLSel == 2) stpL3--;
        if (stpLSel == 3) stpL4--;
        if (stpLSel == 4) stpL5--;
        if (stpLSel == 5) stpL6--;
        if (stpLSel == 6) stpL7--;
        if (stpLSel == 7) stpL8--;
      }
      if (stpL1 == 0) stpL1 = 1;
      if (stpL1 == 31) stpL1 = 30;
      if (stpL2 == 0) stpL2 = 1;
      if (stpL2 == 31) stpL2 = 30;
      if (stpL3 == 0) stpL3 = 1;
      if (stpL3 == 31) stpL3 = 30;
      if (stpL4 == 0) stpL4 = 1;
      if (stpL4 == 31) stpL4 = 30;
      if (stpL5 == 0) stpL5 = 1;
      if (stpL5 == 31) stpL5 = 30;
      if (stpL6 == 0) stpL6 = 1;
      if (stpL6 == 31) stpL6 = 30;
      if (stpL7 == 0) stpL7 = 1;
      if (stpL7 == 31) stpL7 = 30;
      if (stpL8 == 0) stpL8 = 1;
      if (stpL8 == 31) stpL8 = 30;
    }
    if (mainMenuSel == 1) {
      if (result == DIR_CW) {
        gateOut++;
      } else if (result == DIR_CCW) {
        gateOut--;
      }
      if (gateOut == -1) gateOut = 0;
      if (gateOut == 3) gateOut = 2;
    }
    if (mainMenuSel == 3) {
      if (result == DIR_CW) {
        if (stpTSel == 0) stpT1++;
        if (stpTSel == 1) stpT2++;
        if (stpTSel == 2) stpT3++;
        if (stpTSel == 3) stpT4++;
        if (stpTSel == 4) stpT5++;
        if (stpTSel == 5) stpT6++;
        if (stpTSel == 6) stpT7++;
        if (stpTSel == 7) stpT8++;
      } else if (result == DIR_CCW) {
        if (stpTSel == 0) stpT1--;
        if (stpTSel == 1) stpT2--;
        if (stpTSel == 2) stpT3--;
        if (stpTSel == 3) stpT4--;
        if (stpTSel == 4) stpT5--;
        if (stpTSel == 5) stpT6--;
        if (stpTSel == 6) stpT7--;
        if (stpTSel == 7) stpT8--;
      }
      if (stpT1 == 0) stpT1 = 1;
      if (stpT1 == 5) stpT1 = 4;
      if (stpT2 == 0) stpT2 = 1;
      if (stpT2 == 5) stpT2 = 4;
      if (stpT3 == 0) stpT3 = 1;
      if (stpT3 == 5) stpT3 = 4;
      if (stpT4 == 0) stpT4 = 1;
      if (stpT4 == 5) stpT4 = 4;
      if (stpT5 == 0) stpT5 = 1;
      if (stpT5 == 5) stpT5 = 4;
      if (stpT6 == 0) stpT6 = 1;
      if (stpT6 == 5) stpT6 = 4;
      if (stpT7 == 0) stpT7 = 1;
      if (stpT7 == 5) stpT7 = 4;
      if (stpT8 == 0) stpT8 = 1;
      if (stpT8 == 5) stpT8 = 4;
    }
    if (mainMenuSel == 4) {
      if (result == DIR_CW) {
        Direction++;
      } else if (result == DIR_CCW) {
        Direction--;
      }
      if (Direction == -1) Direction = 0;
      if (Direction == 4) Direction = 3;
    }
    if (mainMenuSel == 5) {
      if (result == DIR_CW) {
        stepCount++;
      } else if (result == DIR_CCW) {
        stepCount--;
      }
      if (stepCount == 0) stepCount = 1;
      if (stepCount == 17) stepCount = 16;
    }
  }
  if (result == DIR_CW || result == DIR_CCW){
    screenSaverRST();
    screenGraphics();
    showdisp();
  }
}

void singleClick() {
  /*if (screenSelect == 1) {if (normalClick == 0) {
    normalClick = 1;
    return;
    }
    if (normalClick == 1) {
    normalClick = 0;
    return;
    }
    }*/
  if (screenSelect == 1 && mainMenuSel == 2)stpLSel++;
  if (screenSelect == 1 && mainMenuSel == 3)stpTSel++;
  if (screenSelect == 0 && screenSaverState != 2) screenSelect = 1;
  screenSaverRST();
  screenGraphics();
  showdisp();
}

void screenSaverRST() {
  //unsigned long curMill = millis();
  //prevMill1 = curMill;
  screenSaverState = 0;
}

void doubleClick() {
  screenSelect = 0;
  screenSaverRST();
  screenGraphics();
  showdisp();
}

void save() {
  EEPROM.write(1, stpT1);
  EEPROM.write(2, stpT2);
  EEPROM.write(3, stpT3);
  EEPROM.write(4, stpT4);
  EEPROM.write(5, stpT5);
  EEPROM.write(6, stpT6);
  EEPROM.write(7, stpT7);
  EEPROM.write(8, stpT8);
  EEPROM.write(9, clkDiv);
  EEPROM.write(10, gateOut);
  EEPROM.write(11, Direction);
  EEPROM.write(12, stpL1);
  EEPROM.write(13, stpL2);
  EEPROM.write(14, stpL3);
  EEPROM.write(15, stpL4);
  EEPROM.write(16, stpL5);
  EEPROM.write(17, stpL6);
  EEPROM.write(18, stpL7);
  EEPROM.write(19, stpL8);
  EEPROM.write(20, stepCount);
  display.clearDisplay();
  display.setCursor(0, 20);
  display.setTextSize(4);
  display.setTextColor(WHITE);
  display.println("SAVED");
  display.display();
  delay(40);
  display.clearDisplay();
  display.setTextSize(1);
  
}

void fliopwrite()  {
  flopCV = !flipCV;
  flopINV = !flipINV;
  digitalWrite(flipCVpin, flipCV);
  digitalWrite(flopCVpin, flopCV);
  digitalWrite(flipINVpin, flipINV);
  digitalWrite(flopINVpin, flopINV);
}

void showdisp() {
 // unsigned long curMill = millis();
 // if (curMill - prevMill0 >= mspf) {
   // prevMill0 = curMill;
    display.display();
    display.clearDisplay();
  //}
  Serial.println("screen refreshed");
}

void screenGraphics() {
  if (mainMenuSel <= 0) {//clock divisions
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Gate Lengh");
    display.setTextSize(6);
    if (clkDiv <= 9) {
      display.setCursor(49, 19);
      display.print(clkDiv);
    }
    if (clkDiv >= 10) {
      display.setCursor(26, 19);
      display.print(clkDiv);
    }
  }
  if (mainMenuSel == 1) {//gate out
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Gate Out");
    if (gateOut <= 0) {
      display.setTextSize(6);
      display.setCursor(10, 19);
      display.print("OFF");
      flipCV = 1;
      flipINV = 1;
    }
    if (gateOut == 1) {
      display.drawCircle(64, 38, 17, WHITE);
      display.setTextSize(2);
      display.setCursor(0, 30);
      display.print("INV");
      display.setCursor(88, 30);
      display.print("OUT");
      flipCV = 1;
      flipINV = 0;
    }
    if (gateOut >= 2) {
      display.drawCircle(64, 38, 17, WHITE);
      display.setTextSize(2);
      display.setCursor(0, 30);
      display.print("CV");
      display.setCursor(88, 30);
      display.print("OUT");
      flipCV = 0;
      flipINV = 1;
    }
    fliopwrite();
  }
  if (mainMenuSel == 2) {//step lenght
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Step Lengh");
    display.drawLine(0,   19, 128,   19, WHITE);
    display.fillRect(1,   20, 14, stpL1, WHITE);
    display.fillRect(17,  20, 14, stpL2, WHITE);
    display.fillRect(33,  20, 14, stpL3, WHITE);
    display.fillRect(49,  20, 14, stpL4, WHITE);
    display.fillRect(65,  20, 14, stpL5, WHITE);
    display.fillRect(81,  20, 14, stpL6, WHITE);
    display.fillRect(97,  20, 14, stpL7, WHITE);
    display.fillRect(113, 20, 14, stpL8, WHITE);
    display.setTextSize(1);
    display.setCursor(1, 54);
    display.println(stpL1);
    display.setCursor(17, 54);
    display.println(stpL2);
    display.setCursor(33, 54);
    display.println(stpL3);
    display.setCursor(49, 54);
    display.println(stpL4);
    display.setCursor(65, 54);
    display.println(stpL5);
    display.setCursor(81, 54);
    display.println(stpL6);
    display.setCursor(97, 54);
    display.println(stpL7);
    display.setCursor(113, 54);
    display.println(stpL8);
    display.drawLine(stpLBline + 1, 63, stpLBline + 14, 63, WHITE);
    stpLBline = map(stpLSel, 0, 7, 0, 112);
    if (stpLSel >= 8) stpLSel = 0;
  }
  if (mainMenuSel == 3) {//gate type
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Gate Type");
    if (stpT1 <= 1) display.fillRect(1, 20, 14, 40, WHITE);
    if (stpT1 == 2) {
      display.drawRect(1,  20, 14, 40, WHITE);
      display.fillRect(1, 20, 14,  4, WHITE);
      display.fillRect(1,   29, 14, 4, WHITE);
      display.fillRect(1,   38, 14, 4, WHITE);
      display.fillRect(1,   47, 14, 4, WHITE);
    }
    if (stpT1 == 3) {
      display.fillRect(1, 20, 14,  4, WHITE);
      display.drawRect(1,   20, 14, 40, WHITE);
    }
    if (stpT1 >= 4) display.drawRect(1, 20, 14, 40, WHITE);
    if (stpT2 <= 1) display.fillRect(17, 20, 14, 40, WHITE);
    if (stpT2 == 2) {
      display.drawRect(17,  20, 14, 40, WHITE);
      display.fillRect(17, 20, 14,  4, WHITE);
      display.fillRect(17,   29, 14, 4, WHITE);
      display.fillRect(17,   38, 14, 4, WHITE);
      display.fillRect(17,   47, 14, 4, WHITE);
    }
    if (stpT2 == 3) {
      display.fillRect(17, 20, 14,  4, WHITE);
      display.drawRect(17,   20, 14, 40, WHITE);
    }
    if (stpT2 >= 4) display.drawRect(17, 20, 14, 40, WHITE);
    if (stpT3 <= 1) display.fillRect(33,  20, 14, 40, WHITE);
    if (stpT3 == 2) {
      display.drawRect(33,  20, 14, 40, WHITE);
      display.fillRect(33,  20, 14,  4, WHITE);
      display.fillRect(33,    29, 14, 4, WHITE);
      display.fillRect(33,    38, 14, 4, WHITE);
      display.fillRect(33,    47, 14, 4, WHITE);
    }
    if (stpT3 == 3) {
      display.fillRect(33,  20, 14,  4, WHITE);
      display.drawRect(33,    20, 14, 40, WHITE);
    }
    if (stpT3 >= 4) display.drawRect(33,  20, 14, 40, WHITE);
    if (stpT4 <= 1) display.fillRect(49,  20, 14, 40, WHITE);
    if (stpT4 == 2) {
      display.drawRect(49,  20, 14, 40, WHITE);
      display.fillRect(49,  20, 14,  4, WHITE);
      display.fillRect(49,    29, 14, 4, WHITE);
      display.fillRect(49,    38, 14, 4, WHITE);
      display.fillRect(49,    47, 14, 4, WHITE);
    }
    if (stpT4 == 3) {
      display.fillRect(49,  20, 14,  4, WHITE);
      display.drawRect(49,    20, 14, 40, WHITE);
    }
    if (stpT4 >= 4) display.drawRect(49,  20, 14, 40, WHITE);
    if (stpT5 <= 1) display.fillRect(65,  20, 14, 40, WHITE);
    if (stpT5 == 2) {
      display.drawRect(65,  20, 14, 40, WHITE);
      display.fillRect(65,  20, 14,  4, WHITE);
      display.fillRect(65,    29, 14, 4, WHITE);
      display.fillRect(65,    38, 14, 4, WHITE);
      display.fillRect(65,    47, 14, 4, WHITE);
    }
    if (stpT5 == 3) {
      display.fillRect(65,  20, 14,  4, WHITE);
      display.drawRect(65,    20, 14, 40, WHITE);
    }
    if (stpT5 >= 4) display.drawRect(65,  20, 14, 40, WHITE);
    if (stpT6 <= 1) display.fillRect(81,  20, 14, 40, WHITE);
    if (stpT6 == 2) {
      display.drawRect(81,  20, 14, 40, WHITE);
      display.fillRect(81,  20, 14,  4, WHITE);
      display.fillRect(81,    29, 14, 4, WHITE);
      display.fillRect(81,    38, 14, 4, WHITE);
      display.fillRect(81,    47, 14, 4, WHITE);
    }
    if (stpT6 == 3) {
      display.fillRect(81,  20, 14,  4, WHITE);
      display.drawRect(81,    20, 14, 40, WHITE);
    }
    if (stpT6 >= 4) display.drawRect(81,  20, 14, 40, WHITE);
    if (stpT7 <= 1) display.fillRect(97,  20, 14, 40, WHITE);
    if (stpT7 == 2) {
      display.drawRect(97,  20, 14, 40, WHITE);
      display.fillRect(97,  20, 14,  4, WHITE);
      display.fillRect(97,    29, 14, 4, WHITE);
      display.fillRect(97,    38, 14, 4, WHITE);
      display.fillRect(97,    47, 14, 4, WHITE);
    }
    if (stpT7 == 3) {
      display.fillRect(97,  20, 14,  4, WHITE);
      display.drawRect(97,    20, 14, 40, WHITE);
    }
    if (stpT7 >= 4) display.drawRect(97,  20, 14, 40, WHITE);
    if (stpT8 <= 1) display.fillRect(113,  20, 14, 40, WHITE);
    if (stpT8 == 2) {
      display.drawRect(113,  20, 14, 40, WHITE);
      display.fillRect(113,  20, 14,  4, WHITE);
      display.fillRect(113,    29, 14, 4, WHITE);
      display.fillRect(113,    38, 14, 4, WHITE);
      display.fillRect(113,    47, 14, 4, WHITE);
    }
    if (stpT8 == 3) {
      display.fillRect(113,  20, 14,  4, WHITE);
      display.drawRect(113,    20, 14, 40, WHITE);
    }
    if (stpT8 >= 4) display.drawRect(113,  20, 14, 40, WHITE);
    display.drawLine(stpTBline + 1, 63, stpTBline + 14, 63, WHITE);
    stpTBline = map(stpTSel, 0, 7, 0, 112);
    if (stpTSel >= 8) stpTSel = 0;
  }
  if (mainMenuSel == 4) {//direction
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Direction");
    if (Direction <= 0) display.drawBitmap(0, 20, looping_arrow, 128, 44, WHITE);
    if (Direction == 1) display.drawBitmap(0, 20, mirrored_looping_arrow, 128, 44, WHITE);
    if (Direction == 2) display.drawBitmap(0, 20, back_and_forth_arrow, 128, 44, WHITE);
    if (Direction >= 3) display.drawBitmap(0, 20, RANDOM, 128, 44, WHITE);
  }
  if (mainMenuSel >= 5) {//sequence lenght
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Seq Lenght");
    stepCountCircle = map(stepCount, 1, 8, 9, 22);
    display.fillCircle(0, 40, stepCountCircle, WHITE);
    display.fillCircle(128, 40, stepCountCircle, WHITE);
    if (stepCount <= 8) display.setCursor(64 - stepCountCircle, 39 - stepCountCircle);
    if (stepCount >= 9) display.setCursor(36, 22);
    if (stepCount <= 8) display.setTextSize(stepCount);
    if (stepCount >= 9) display.setTextSize(4);
    display.println(stepCount);
    display.setTextColor(WHITE);
    display.setTextSize(2);
  }
  if (screenSelect == 0) {//screen select line-top
    display.drawLine(0, 15, 128, 15, WHITE);
  }
  if (screenSelect == 1) {//screen selesct line-bottom
    display.drawLine(0, 16, 128, 16, WHITE);
  }
}

void setup() {
  Wire.setClock(3400000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  pinMode(muxA, OUTPUT);
  pinMode(muxB, OUTPUT);
  pinMode(muxC, OUTPUT);
  pinMode(resetIn, INPUT);
  pinMode(holdIn, INPUT);
  pinMode(clockIn, INPUT_PULLUP);
  pinMode(clockDetectIn, INPUT_PULLUP);
  pinMode(stepDetectIn, INPUT_PULLUP);
  attachInterrupt(0, clockSense, CHANGE);
  /*attachInterrupt(digitalPinToInterrupt(1), rotate, CHANGE);
    attachInterrupt(digitalPinToInterrupt(0), rotate, CHANGE);*/
  attachInterrupt(digitalPinToInterrupt(3), rotate, CHANGE);
  attachInterrupt(1, screenSaverRST, CHANGE);
  button.attachClick(singleClick);
  button.attachDoubleClick(doubleClick);
  button.attachLongPressStart(save);
  display.clearDisplay();
  display.drawBitmap(0, 0, Mach_Modules_logo, 128, 64, WHITE);
  display.display();
  delay(200);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  for (int i = 0; i < 72; i++) {
    display.drawCircle(64, 32, i, WHITE);
    display.fillCircle(64, 32, i - 1, BLACK);
    display.display();
    mux(i / 9);
    delay(2);
  }
  display.clearDisplay();
  //#####################LOADING##########BEGINING##########
  stpT1 = EEPROM.read(1);
  stpT2 = EEPROM.read(2);
  stpT3 = EEPROM.read(3);
  stpT4 = EEPROM.read(4);
  stpT5 = EEPROM.read(5);
  stpT6 = EEPROM.read(6);
  stpT7 = EEPROM.read(7);
  stpT8 = EEPROM.read(8);
  clkDiv = EEPROM.read(9);
  gateOut = EEPROM.read(10);
  Direction = EEPROM.read(11);
  stpL1 = EEPROM.read(12);
  stpL2 = EEPROM.read(13);
  stpL3 = EEPROM.read(14);
  stpL4 = EEPROM.read(15);
  stpL5 = EEPROM.read(16);
  stpL6 = EEPROM.read(17);
  stpL7 = EEPROM.read(18);
  stpL8 = EEPROM.read(19);
  stepCount = EEPROM.read(20);
  //#####################LOADING##########END###############
  screenGraphics();
  showdisp();;
  Serial.begin(2000000);
}

void loop() {
  unsigned long curMill = millis();
  sequencerEngine();
  rotate();
  button.tick();

  if (screenSaverState == 0) {
    prevMill1 = curMill;
    screenSaverState = 1;
  }
  if (screenSaverState == 1) {
    if (curMill - prevMill1  >= screenSaverTimeout) {
      prevMill1 = curMill;
      display.clearDisplay();
      display.drawBitmap(random(0, 115), random(0, 22), M_logo, 13, 42, WHITE);
      showdisp();
      prevMill2 = curMill;
      screenSaverState = 2;
      screenSelect = 0;
    }
    //else showdisp();
  }
  if (screenSaverState == 2) {
    if (curMill - prevMill2  >= screenSaverRenew) {
      prevMill2 = curMill;
      display.clearDisplay();
      display.drawBitmap(random(0, 115), random(0, 22), M_logo, 13, 42, WHITE);
      showdisp();
    }
  }
  if (stpTnow == 1 ) gateClockSense = 1;
  if /*(stpTnow == 2)*/(gateClockSense == 1) {
    if (stpTnow == 2 ) {
      if (curMill - prevMillG1 >= clkDiv * 10) {
        prevMillG1 = curMill;
        gateClockSense = 0;
      }
    } 
  }
  if (stpTnow == 3 ) {
    //if (curMill - prevMillG2 < clkDiv * 10 && stpLnowVar == 0) gateClockSense = 1;
    if (curMill - prevMillG2 >= clkDiv * 10 && stpT3now == 0) {
      prevMillG2 = curMill;
      gateClockSense = 0;
      stpT3now = 1;
    }
    //if (gateClockSense == 0 && stpLnowVar == 0) prevMillG2 = curMill;
    /*if (stpLnowVar != 0) {
      gateClockSense = 0;
      prevMillG2 = curMill;
    }*/
    if (stpLnowVar == 0 && stpT3now != 0) stpT3now = 0;
  }
  
  if (stpTnow == 4 ) gateClockSense = 0;
  if (gateClockSense == 0) prevMillG1 = curMill;
  //Serial.println(gateClockSense);
  digitalWrite(gateOutpin, gateClockSense);
  digitalWrite(flipCVpin, !gateClockSense);
}
