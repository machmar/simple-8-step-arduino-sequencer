#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Rotary.h>
#include <OneButton.h>
//#include <PinChangeInterrupt.h>

Adafruit_SSD1306 display(128, 64, &Wire, 60);
Rotary rotary = Rotary(3, 16);
OneButton button(14, true);

#define mspf 50

long prevMill0;
bool normalClick;

int mainMenuSel;
bool screenSelect;
int stpLSel;
int stpLBline;
int stpTSel;
int stpTBline;
int numSteps = 7;

int clkDiv = 1;
int gateOut = 0;
int Direction = 0;
int numStepsCircle;
int stpL1 = 1;
int stpL2 = 1;
int stpL3 = 1;
int stpL4 = 1;
int stpL5 = 1;
int stpL6 = 1;
int stpL7 = 1;
int stpL8 = 1;
int stpT1 = 1;
int stpT2 = 1;
int stpT3 = 1;
int stpT4 = 1;
int stpT5 = 1;
int stpT6 = 1;
int stpT7 = 1;
int stpT8 = 1;
int stpT1Div = 1;
int stpT2Div = 1;
int stpT3Div = 1;
int stpT4Div = 1;
int stpT5Div = 1;
int stpT6Div = 1;
int stpT7Div = 1;
int stpT8Div = 1;

void rotate() {
  unsigned char result = rotary.process();
  if (screenSelect == 0) {
    if (result == DIR_CW) {
      mainMenuSel++;
    } else if (result == DIR_CCW) {
      mainMenuSel--;
    }
    if (mainMenuSel == -1) mainMenuSel = 0;
    if (mainMenuSel == 6) mainMenuSel = 5;
  }
  if (screenSelect == 1) {
    if (mainMenuSel <= 0) {
      if (result == DIR_CW) {
        clkDiv++;
      } else if (result == DIR_CCW) {
        clkDiv--;
      }
      if (clkDiv == 0) clkDiv = 1;
      if (clkDiv == 51) clkDiv = 50;
    }
    if (mainMenuSel == 1) {
      if (result == DIR_CW) {
        if (stpLSel == 0) stpL1++;
        if (stpLSel == 1) stpL2++;
        if (stpLSel == 2) stpL3++;
        if (stpLSel == 3) stpL4++;
        if (stpLSel == 4) stpL5++;
        if (stpLSel == 5) stpL6++;
        if (stpLSel == 6) stpL7++;
        if (stpLSel == 7) stpL8++;
      } else if (result == DIR_CCW) {
        if (stpLSel == 0) stpL1--;
        if (stpLSel == 1) stpL2--;
        if (stpLSel == 2) stpL3--;
        if (stpLSel == 3) stpL4--;
        if (stpLSel == 4) stpL5--;
        if (stpLSel == 5) stpL6--;
        if (stpLSel == 6) stpL7--;
        if (stpLSel == 7) stpL8--;
      }
      if (stpL1 == 0) stpL1 = 1;
      if (stpL1 == 31) stpL1 = 30;
      if (stpL2 == 0) stpL2 = 1;
      if (stpL2 == 31) stpL2 = 30;
      if (stpL3 == 0) stpL3 = 1;
      if (stpL3 == 31) stpL3 = 30;
      if (stpL4 == 0) stpL4 = 1;
      if (stpL4 == 31) stpL4 = 30;
      if (stpL5 == 0) stpL5 = 1;
      if (stpL5 == 31) stpL5 = 30;
      if (stpL6 == 0) stpL6 = 1;
      if (stpL6 == 31) stpL6 = 30;
      if (stpL7 == 0) stpL7 = 1;
      if (stpL7 == 31) stpL7 = 30;
      if (stpL8 == 0) stpL8 = 1;
      if (stpL8 == 31) stpL8 = 30;
    }
    if (mainMenuSel == 2) {
      if (result == DIR_CW) {
        gateOut++;
      } else if (result == DIR_CCW) {
        gateOut--;
      }
      if (gateOut == -1) gateOut = 0;
      if (gateOut == 3) gateOut = 2;
    }
    if (mainMenuSel == 3) {
      if (result == DIR_CW) {
        if (stpTSel == 0) stpT1++;
        if (stpTSel == 1) stpT2++;
        if (stpTSel == 2) stpT3++;
        if (stpTSel == 3) stpT4++;
        if (stpTSel == 4) stpT5++;
        if (stpTSel == 5) stpT6++;
        if (stpTSel == 6) stpT7++;
        if (stpTSel == 7) stpT8++;
      } else if (result == DIR_CCW) {
        if (stpTSel == 0) stpT1--;
        if (stpTSel == 1) stpT2--;
        if (stpTSel == 2) stpT3--;
        if (stpTSel == 3) stpT4--;
        if (stpTSel == 4) stpT5--;
        if (stpTSel == 5) stpT6--;
        if (stpTSel == 6) stpT7--;
        if (stpTSel == 7) stpT8--;
      }
      if (stpT1 == 0) stpT1 = 1;
      if (stpT1 == 5) stpT1 = 4;
      if (stpT2 == 0) stpT2 = 1;
      if (stpT2 == 5) stpT2 = 4;
      if (stpT3 == 0) stpT3 = 1;
      if (stpT3 == 5) stpT3 = 4;
      if (stpT4 == 0) stpT4 = 1;
      if (stpT4 == 5) stpT4 = 4;
      if (stpT5 == 0) stpT5 = 1;
      if (stpT5 == 5) stpT5 = 4;
      if (stpT6 == 0) stpT6 = 1;
      if (stpT6 == 5) stpT6 = 4;
      if (stpT7 == 0) stpT7 = 1;
      if (stpT7 == 5) stpT7 = 4;
      if (stpT8 == 0) stpT8 = 1;
      if (stpT8 == 5) stpT8 = 4;
    }
    if (mainMenuSel == 4) {
      if (result == DIR_CW) {
        Direction++;
      } else if (result == DIR_CCW) {
        Direction--;
      }
      if (Direction == -1) Direction = 0;
      if (Direction == 4) Direction = 3;
    }
    if (mainMenuSel == 5) {
      if (result == DIR_CW) {
        numSteps++;
      } else if (result == DIR_CCW) {
        numSteps--;
      }
      if (numSteps == -1) numSteps = 0;
      if (numSteps == 8) numSteps = 7;
    }
  }
}

void singleClick() {
  /*if (screenSelect == 1) {if (normalClick == 0) {
    normalClick = 1;
    return;
    }
    if (normalClick == 1) {
    normalClick = 0;
    return;
    }
    }*/
  if (screenSelect == 1 && mainMenuSel == 1)stpLSel++;
  if (screenSelect == 1 && mainMenuSel == 3)stpTSel++;
  if (screenSelect == 0) screenSelect = 1;
}
void doubleClick() {
  screenSelect = 0;
}

void showdisp() {
  unsigned long curMill = millis();
  if (curMill - prevMill0 >= mspf) {
    prevMill0 = curMill;
    display.display();
    display.clearDisplay();
  }
}

// 'looping arrow bitmap', 128x44px
const unsigned char looping_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 
  0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 
  0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 
  0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 
  0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 
  0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'mirrored looping arrow bitmap', 128x44px
const unsigned char mirrored_looping_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 
  0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 
  0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 
  0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 
  0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 
  0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 
  0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 
  0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 
  0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 
  0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'back and forth arrow', 128x44px
const unsigned char back_and_forth_arrow [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'RANDOM', 128x44px
const unsigned char RANDOM [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xc0, 0x00, 0x10, 0x03, 0xf8, 0x07, 0xff, 0xff, 0xc0, 0x01, 0xfe, 0x01, 0xf0, 0x00, 0x7e, 
  0x29, 0xb0, 0x00, 0x28, 0x00, 0x58, 0x00, 0x81, 0x41, 0x70, 0x03, 0x83, 0x80, 0x50, 0x00, 0x70, 
  0x28, 0x58, 0x00, 0x28, 0x00, 0x2c, 0x00, 0x81, 0x40, 0xd8, 0x0e, 0x00, 0xc0, 0x58, 0x00, 0xa0, 
  0x28, 0x28, 0x00, 0x54, 0x00, 0x36, 0x00, 0x81, 0x40, 0x2c, 0x0c, 0x00, 0x60, 0x28, 0x00, 0xa0, 
  0x28, 0x28, 0x00, 0x54, 0x00, 0x2b, 0x00, 0x81, 0x40, 0x16, 0x14, 0x00, 0x50, 0x3c, 0x01, 0xb0, 
  0x28, 0x28, 0x00, 0x54, 0x00, 0x25, 0x80, 0x81, 0x40, 0x16, 0x18, 0x00, 0x30, 0x34, 0x01, 0xb0, 
  0x28, 0x38, 0x00, 0x8a, 0x00, 0x22, 0xc0, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x2e, 0x02, 0xb0, 
  0x28, 0x60, 0x00, 0x8a, 0x00, 0x21, 0x60, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x2a, 0x02, 0x90, 
  0x2f, 0xc0, 0x00, 0x85, 0x00, 0x20, 0xb0, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x25, 0x04, 0x50, 
  0x28, 0xa0, 0x01, 0x05, 0x00, 0x20, 0x58, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x45, 0x04, 0x50, 
  0x28, 0x70, 0x01, 0x03, 0x00, 0x20, 0x28, 0x81, 0x40, 0x0a, 0x28, 0x00, 0x28, 0x42, 0x88, 0x50, 
  0x28, 0x58, 0x01, 0xfe, 0x80, 0x20, 0x14, 0x81, 0x40, 0x0e, 0x18, 0x00, 0x30, 0x42, 0x90, 0x50, 
  0x28, 0x28, 0x02, 0x02, 0x80, 0x20, 0x0a, 0x81, 0x40, 0x16, 0x14, 0x00, 0x50, 0x41, 0x50, 0x50, 
  0x28, 0x14, 0x02, 0x01, 0x40, 0x20, 0x05, 0x81, 0x40, 0x1c, 0x0a, 0x00, 0xa0, 0x40, 0xe0, 0x50, 
  0x28, 0x16, 0x04, 0x01, 0x40, 0x20, 0x02, 0x81, 0x40, 0x38, 0x06, 0x00, 0xc0, 0x40, 0xa0, 0x50, 
  0x28, 0x0b, 0x04, 0x00, 0xe0, 0x20, 0x01, 0x81, 0x60, 0xf0, 0x03, 0x83, 0x80, 0x40, 0x60, 0x58, 
  0xff, 0x07, 0xff, 0x03, 0xf9, 0xfc, 0x00, 0x8f, 0xff, 0xc0, 0x00, 0xfe, 0x01, 0xf0, 0x41, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Wire.setClock(3400000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setTextWrap(false);
  delay(100);
  display.println("MachmarMachmar");
  display.display();
  delay(100);
  display.println("MachmarMachmar");
  display.display();
  delay(50);
  display.println("MachmarMachmar");
  display.display();
  delay(100);
  display.println("MachmarMachmar");
  display.display();
  delay(200);
  display.setTextSize(1);
  for (int i = 0; i < 72; i++) {
    display.drawCircle(64, 32, i, WHITE);
    display.fillCircle(64, 32, i - 1, BLACK);
    display.display();
    delay(5);
  }
  display.clearDisplay();
  attachInterrupt(1, rotate, CHANGE);
  attachInterrupt(0, rotate, CHANGE);
  button.attachClick(singleClick);
  button.attachDoubleClick(doubleClick);
}

void loop() {
  rotate();
  button.tick();
  if (mainMenuSel <= 0) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Clock Div");
    display.setTextSize(6);
    if (clkDiv <= 9) {
      display.setCursor(49, 19);
      display.print(clkDiv);
    }
    if (clkDiv >= 10) {
      display.setCursor(26, 19);
      display.print(clkDiv);
    }
  }
  if (mainMenuSel == 1) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Step Lengh");
    display.drawLine(0,   19, 128,   19, WHITE);
    display.fillRect(1,   20, 14, stpL1, WHITE);
    display.fillRect(17,  20, 14, stpL2, WHITE);
    display.fillRect(33,  20, 14, stpL3, WHITE);
    display.fillRect(49,  20, 14, stpL4, WHITE);
    display.fillRect(65,  20, 14, stpL5, WHITE);
    display.fillRect(81,  20, 14, stpL6, WHITE);
    display.fillRect(97,  20, 14, stpL7, WHITE);
    display.fillRect(113, 20, 14, stpL8, WHITE);
    display.setTextSize(1);
    display.setCursor(1, 54);
    display.println(stpL1);
    display.setCursor(17, 54);
    display.println(stpL2);
    display.setCursor(33, 54);
    display.println(stpL3);
    display.setCursor(49, 54);
    display.println(stpL4);
    display.setCursor(65, 54);
    display.println(stpL5);
    display.setCursor(81, 54);
    display.println(stpL6);
    display.setCursor(97, 54);
    display.println(stpL7);
    display.setCursor(113, 54);
    display.println(stpL8);
    display.drawLine(stpLBline + 1, 63, stpLBline + 14, 63, WHITE);
    stpLBline = map(stpLSel, 0, 7, 0, 112);
    if (stpLSel >= 8) stpLSel = 0;
  }
  if (mainMenuSel == 2) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Gate Out");
    if (gateOut <= 0) {
      display.setTextSize(6);
      display.setCursor(10, 19);
      display.print("OFF");
    }
    if (gateOut == 1) {
      display.drawCircle(64, 38, 17, WHITE);
      display.setTextSize(2);
      display.setCursor(0, 30);
      display.print("INV");
      display.setCursor(88, 30);
      display.print("OUT");
    }
    if (gateOut >= 2) {
      display.drawCircle(64, 38, 17, WHITE);
      display.setTextSize(2);
      display.setCursor(0, 30);
      display.print("CV");
      display.setCursor(88, 30);
      display.print("OUT");
    }
  }
  if (mainMenuSel == 3) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Gate Type");
    if (stpT1 <= 1) display.fillRect(1, 20, 14, 40, WHITE);
    if (stpT1 == 2){ display.drawRect(1,  20, 14, 40, WHITE); display.fillRect(1, 20, 14,  4, WHITE); display.fillRect(1,   29, 14, 4, WHITE); display.fillRect(1,   38, 14, 4, WHITE); display.fillRect(1,   47, 14, 4, WHITE); }
    if (stpT1 == 3){ display.fillRect(1, 20, 14,  4, WHITE); display.drawRect(1,   20, 14, 40, WHITE);}
    if (stpT1 >= 4) display.drawRect(1, 20, 14, 40, WHITE);
    if (stpT2 <= 1) display.fillRect(17, 20, 14, 40, WHITE);
    if (stpT2 == 2){ display.drawRect(17,  20, 14, 40, WHITE); display.fillRect(17, 20, 14,  4, WHITE); display.fillRect(17,   29, 14, 4, WHITE); display.fillRect(17,   38, 14, 4, WHITE); display.fillRect(17,   47, 14, 4, WHITE);}
    if (stpT2 == 3){ display.fillRect(17, 20, 14,  4, WHITE); display.drawRect(17,   20, 14, 40, WHITE);}
    if (stpT2 >= 4) display.drawRect(17, 20, 14, 40, WHITE);
    if (stpT3 <= 1) display.fillRect(33,  20, 14, 40, WHITE);
    if (stpT3 == 2){ display.drawRect(33,  20, 14, 40, WHITE); display.fillRect(33,  20, 14,  4, WHITE); display.fillRect(33,    29, 14, 4, WHITE); display.fillRect(33,    38, 14, 4, WHITE); display.fillRect(33,    47, 14, 4, WHITE);}
    if (stpT3 == 3){ display.fillRect(33,  20, 14,  4, WHITE); display.drawRect(33,    20, 14, 40, WHITE);}
    if (stpT3 >= 4) display.drawRect(33,  20, 14, 40, WHITE);
    if (stpT4 <= 1) display.fillRect(49,  20, 14, 40, WHITE);
    if (stpT4 == 2){ display.drawRect(49,  20, 14, 40, WHITE); display.fillRect(49,  20, 14,  4, WHITE); display.fillRect(49,    29, 14, 4, WHITE); display.fillRect(49,    38, 14, 4, WHITE); display.fillRect(49,    47, 14, 4, WHITE);}
    if (stpT4 == 3){ display.fillRect(49,  20, 14,  4, WHITE); display.drawRect(49,    20, 14, 40, WHITE);}
    if (stpT4 >= 4) display.drawRect(49,  20, 14, 40, WHITE);
    if (stpT5 <= 1) display.fillRect(65,  20, 14, 40, WHITE);
    if (stpT5 == 2){ display.drawRect(65,  20, 14, 40, WHITE); display.fillRect(65,  20, 14,  4, WHITE); display.fillRect(65,    29, 14, 4, WHITE); display.fillRect(65,    38, 14, 4, WHITE); display.fillRect(65,    47, 14, 4, WHITE);}
    if (stpT5 == 3){ display.fillRect(65,  20, 14,  4, WHITE); display.drawRect(65,    20, 14, 40, WHITE);}
    if (stpT5 >= 4) display.drawRect(65,  20, 14, 40, WHITE);
    if (stpT6 <= 1) display.fillRect(81,  20, 14, 40, WHITE);
    if (stpT6 == 2){ display.drawRect(81,  20, 14, 40, WHITE); display.fillRect(81,  20, 14,  4, WHITE); display.fillRect(81,    29, 14, 4, WHITE); display.fillRect(81,    38, 14, 4, WHITE); display.fillRect(81,    47, 14, 4, WHITE);}
    if (stpT6 == 3){ display.fillRect(81,  20, 14,  4, WHITE); display.drawRect(81,    20, 14, 40, WHITE);}
    if (stpT6 >= 4) display.drawRect(81,  20, 14, 40, WHITE);
    if (stpT7 <= 1) display.fillRect(97,  20, 14, 40, WHITE);
    if (stpT7 == 2){ display.drawRect(97,  20, 14, 40, WHITE); display.fillRect(97,  20, 14,  4, WHITE); display.fillRect(97,    29, 14, 4, WHITE); display.fillRect(97,    38, 14, 4, WHITE); display.fillRect(97,    47, 14, 4, WHITE);}
    if (stpT7 == 3){ display.fillRect(97,  20, 14,  4, WHITE); display.drawRect(97,    20, 14, 40, WHITE);}
    if (stpT7 >= 4) display.drawRect(97,  20, 14, 40, WHITE);
    if (stpT8 <= 1) display.fillRect(113,  20, 14, 40, WHITE);
    if (stpT8 == 2){ display.drawRect(113,  20, 14, 40, WHITE); display.fillRect(113,  20, 14,  4, WHITE); display.fillRect(113,    29, 14, 4, WHITE); display.fillRect(113,    38, 14, 4, WHITE); display.fillRect(113,    47, 14, 4, WHITE);}
    if (stpT8 == 3){ display.fillRect(113,  20, 14,  4, WHITE); display.drawRect(113,    20, 14, 40, WHITE);}
    if (stpT8 >= 4) display.drawRect(113,  20, 14, 40, WHITE);
    display.drawLine(stpTBline + 1, 63, stpTBline + 14, 63, WHITE);
    stpTBline = map(stpTSel, 0, 7, 0, 112);
    if (stpTSel >= 8) stpTSel = 0;
  }
  if (mainMenuSel == 4) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Direction");
    if (Direction <= 0) display.drawBitmap(0, 20, looping_arrow, 128, 44, WHITE);
    if (Direction == 1) display.drawBitmap(0, 20, mirrored_looping_arrow, 128, 44, WHITE);
    if (Direction == 2) display.drawBitmap(0, 20, back_and_forth_arrow, 128, 44, WHITE);
    if (Direction >= 3) display.drawBitmap(0, 20, RANDOM, 128, 44, WHITE);
  }
  if (mainMenuSel >= 5) {
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("Seq Lenght");
    numStepsCircle = map(numSteps, 0, 7, 9, 22);
    display.fillCircle(0, 40, numStepsCircle, WHITE);
    display.fillCircle(128, 40, numStepsCircle, WHITE);
    display.setCursor(64-numStepsCircle, 39-numStepsCircle);
    display.setTextSize(numSteps+1);
    display.println(numSteps + 1);
    //display.setCursor(79, 39-numStepsCircle);
    //display.println(numSteps + 1);
    display.setTextColor(WHITE); 
    display.setTextSize(2); 
  }
  if (screenSelect == 0) {
    display.drawLine(0, 15, 128, 15, WHITE);
  }
  if (screenSelect == 1) {
    display.drawLine(0, 16, 128, 16, WHITE);
  }
  showdisp();
}
